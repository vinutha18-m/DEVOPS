1.for i in {1..10}; 
do
    echo $i;
done

o/p-OUTPUT
1
2
3
4
5
6
7
8
9
10

2.for ((j=1;j<=10;j++)); do
    echo $j;
done

o/p-OUTPUT
1
2
3
4
5
6
7
8
9
10

3.n=7
for (( i=1 ; i<=$n ; i++ )); 
do
    echo $i
done

o/p-OUTPUT
1
2
3
4
5
6
7

4.s=("football" "cricket" "hockey") 
for n in ${s[@]}; 
do
    echo $n
done

o/p- football"
     "cricket" 
     "hockey"

5.for n in {1..5..2}; 
do
    echo $n
done

o/p- 1
     3
     5

6.for n in a b c;
do
   echo $n
done

o/p-a b c

7.arr=( "bash" "shell" "script" )
 
# get length of an array to a variable
arrlength=${#arr[@]}
 
# for loop to read all values and indexes
for (( i=1; i<${arrlength}+1; i++ ));
do
  echo $i " : " ${arr[$i-1]}
done

o/p-~$ ./bash-for-loop-example-5
1  :  bash
2  :  shell
3  :  script

8.for i in {a..f}
do
        echo "$i"
done
o/p- a b c d e f

9.for i in {1..60}
do
if [[$i%11 -ne 0]]
then
continue
fi
echo $i
done

o/p- 11 22 33 44 55 

10.array=(1 2 3 4 5)
   for i in ${!array[@]}
   do
       echo "$i"
   done
o/p- 0 1 2 3 4 

11.#!/bin/bash
# Nested for loop
for (( i = 0; i <= 2; i++ ))
do
    for (( j = 0 ; j <= 9; j++ ))
    do
            echo -n " $i.$j "
    done
  echo ""
done

-------------------------------------------------------------------------------------------

if- condition

1.Check if a file exists:

#!/bin/bash

filename="myfile.txt"

if [ -e "$filename" ]; then
    echo "$filename exists"
else
    echo "$filename does not exist"
fi
Output:
myfile.txt exists

2.Check if a user is root:

#!/bin/bash

if [ "$EUID" -eq 0 ]; then
    echo "You are root"
else
    echo "You are not root"
fi

Output (if run as root):
You are root
Output (if run as a regular user):
You are not root

3.Check if a number is positive or negative:

#!/bin/bash

num=5

if [ "$num" -gt 0 ]; then
    echo "Positive"
else
    echo "Negative or zero"
fi
Output:
Positive

4.Check if a string is empty:

#!/bin/bash

mystring="Hello"

if [ -z "$mystring" ]; then
    echo "String is empty"
else
    echo "String is not empty"
fi
Output:
String is not empty

5.Check if a command was successful:

#!/bin/bash

ls /nonexistent-directory

if [ $? -eq 0 ]; then
    echo "Command was successful"
else
    echo "Command failed"
fi
Output:
ls: cannot access '/nonexistent-directory': No such file or directory
Command failed

6.Check if a variable is set:

#!/bin/bash

if [ -n "$VAR" ]; then
    echo "Variable VAR is set"
else
    echo "Variable VAR is not set"
fi
Output (if VAR is set):

Variable VAR is set
Output (if VAR is not set):
Variable VAR is not set

7.Check if a number is even or odd:

#!/bin/bash

num=7

if [ "$((num % 2))" -eq 0 ]; then
    echo "Even"
else
    echo "Odd"
fi
Output:
Odd

8.Check if a user is logged in:

#!/bin/bash

if who | grep -q "username"; then
    echo "User is logged in"
else
    echo "User is not logged in"
fi
Output (if the user is logged in):
User is logged in
Output (if the user is not logged in):
User is not logged in

9.Check if a year is a leap year:

#!/bin/bash

year=2024

if [ "$((year % 4))" -eq 0 ] && [ "$((year % 100))" -ne 0 ] || [ "$((year % 400))" -eq 0 ]; then
    echo "$year is a leap year"
else
    echo "$year is not a leap year"
fi
Output:

2024 is a leap year

10.Check if a directory is empty:

#!/bin/bash

mydir="myfolder"

if [ -d "$mydir" ] && [ -z "$(ls -A "$mydir")" ]; then
    echo "$mydir is empty"
else
    echo "$mydir is not empty"
fi
Output (if the directory is empty):

myfolder is empty
Output (if the directory is not empty):

myfolder is not empty


s

----------------------------------------------------------------------------------------
if-else condition

1.#!/bin/bash

read -p "Enter first number: " num1
read -p "Enter second number: " num2

if [ "$num1" -eq "$num2" ]; then
    echo "Numbers are equal."
else
    echo "Numbers are not equal."
fi

o/p -Enter first number: 10
Enter second number: 10
Numbers are equal.

2.Check if a user is logged in:
#!/bin/bash

user="username"

if who | grep -wq "$user"; then
    echo "$user is logged in."
else
    echo "$user is not logged in."
fi

o/p -username is logged in.

3.Check if a file is executable:
#!/bin/bash

filename="script.sh"

if [ -x "$filename" ]; then
    echo "$filename is executable."
else
    echo "$filename is not executable."
fi

o/p script.sh is executable.

4.Check if a directory is empty:
  #!/bin/bash

dir="mydir"

if [ -n "$(ls -A $dir)" ]; then
    echo "$dir is not empty."
else
    echo "$dir is empty."
fi


o/p -mydir is not empty.

5. Check if a user has sudo privileges:
   #!/bin/bash

if [ "$(id -u)" -eq 0 ]; then
    echo "You have sudo privileges."
else
    echo "You do not have sudo privileges."
fi

o/p -You do not have sudo privileges.

6.
#!/bin/bash

read -p "Enter a number: " num

if [ "$num" -ge 10 ] && [ "$num" -le 20 ]; then
    echo "Number is within the range of 10 to 20."
else
    echo "Number is not within the range."
fi
 
o/p-Enter a number: 15
Number is within the range of 10 to 20.

7. Check if a command-line argument is provided
#!/bin/bash

if [ -z "$1" ]; then
    echo "No argument provided."
else
    echo "Argument provided: $1"
fi
o/p -No argument provided.

8. Check if a process is running:

#!/bin/bash

process_name="firefox"

if pgrep -x "$process_name" >/dev/null; then
    echo "$process_name is running."
else
    echo "$process_name is not running."
fi

o/p-firefox is running.

9.#!/bin/bash

command="ls"

if command -v "$command" >/dev/null; then
    echo "$command exists."
else
    echo "$command does not exist."
fi
o/p -ls exists.

10.#!/bin/bash

string="Hello, world"

if [[ "$string" == *"world"* ]]; then
    echo "String contains 'world'."
else
    echo "String does not contain 'world'."
fi

o/p-String contains 'world'.


10.Check if a command-line argument is provided:
bash
Copy code
#!/bin/bash

if [ $# -eq 0 ]; then
    echo "No arguments provided"
else
    echo "Arguments provided: $@"
fi
Output:

shell
Copy code
$ ./script.sh arg1 arg2
Arguments provided: arg1 arg2

-------------------------------------------------------------------------------------------
while loop

1.Countdown using a while loop:
bash
Copy code
#!/bin/bash

count=5

while [ "$count" -ge 1 ]; do
    echo "$count"
    ((count--))
done

echo "Blast off!"

Output:
5
4
3
2
1
Blast off!

2.Read numbers until 0 is entered:
bash
Copy code
#!/bin/bash

sum=0
num=1

while [ "$num" -ne 0 ]; do
    read -p "Enter a number (0 to exit): " num
    ((sum+=num))
done

echo "Sum: $sum"

Output:
Enter a number (0 to exit): 5
Enter a number (0 to exit): 3
Enter a number (0 to exit): 0
Sum: 8

3.Print numbers from 1 to 10 using while loop:

#!/bin/bash

num=1

while [ "$num" -le 10 ]; do
    echo "$num"
    ((num++))
done
Output:

Copy code
1
2
3
4
5
6
7
8
9
10

4.Generate a Fibonacci sequence using a while loop:
#!/bin/bash

limit=10
a=0
b=1

echo "$a"
echo "$b"

while [ "$limit" -gt 2 ]; do
    ((limit--))
    next=$((a + b))
    echo "$next"
    a="$b"
    b="$next"
done
Output:
0
1
1
2
3
5
8
13
21
34

5.Read lines from a file using while loop:

#!/bin/bash

file="sample.txt"

while IFS= read -r line; do
    echo "Line: $line"
done < "$file"
Output (if sample.txt contains lines of text):

makefile
Copy code
Line: Hello
Line: World
Line: Bash scripting

6.Print multiplication table using while loop:

#!/bin/bash

num=5
count=1

while [ "$count" -le 10 ]; do
    result=$((num * count))
    echo "$num x $count = $result"
    ((count++))
done
Output:
5 x 1 = 5
5 x 2 = 10
5 x 3 = 15
5 x 4 = 20
5 x 5 = 25
5 x 6 = 30
5 x 7 = 35
5 x 8 = 40
5 x 9 = 45
5 x 10 = 50

7.Reverse a number using a while loop:

#!/bin/bash

read -p "Enter a number: " num
reverse=0

while [ "$num" -gt 0 ]; do
    remainder=$((num % 10))
    reverse=$((reverse * 10 + remainder))
    num=$((num / 10))
done

echo "Reversed number: $reverse"
Output:
Enter a number: 12345
Reversed number: 54321

8.Calculate factorial using a while loop:

#!/bin/bash

read -p "Enter a number: " num
factorial=1
count=1

while [ "$count" -le "$num" ]; do
    factorial=$((factorial * count))
    ((count++))
done

echo "Factorial of $num is $factorial"
Output:
Enter a number: 5
Factorial of 5 is 120

9.Read and validate user input using a while loop:
#!/bin/bash

valid_input=false

while [ "$valid_input" = false ]; do
    read -p "Enter 'yes' to continue: " user_input
    if [ "$user_input" = "yes" ]; then
        valid_input=true
    else
        echo "Invalid input. Please enter 'yes'."
    fi
done

echo "User confirmed."
Output:
Enter 'yes' to continue: no
Invalid input. Please enter 'yes'.
Enter 'yes' to continue: yes
User confirmed.

10.Calculate the sum of digits in a number using a while loop:

#!/bin/bash

read -p "Enter a number: " num
sum=0

while [ "$num" -gt 0 ]; do
    remainder=$((num % 10))
    sum=$((sum + remainder))
    num=$((num / 10))
done

echo "Sum of digits: $sum"
Output:
Enter a number: 12345
Sum of digits: 15






